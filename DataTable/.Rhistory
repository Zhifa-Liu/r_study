}
sapply(mt,mystats)
sapply(mt,mystats,na.omit=TRUE)
mystats <- function(x,na.omit=FALSE){
if(na.omit)
x <- x[!is.na(x)] # 忽略缺失值
c <- length(x)
m <- mean(x)
std <- sd(x)
skew <- sum((x-m)^3/std^3)/c
return(c(counts=c,mean=m,std,skew))
}
sapply(mt,mystats)
sapply(mt,mystats,na.omit=TRUE)
mystats <- function(x,na.omit=FALSE){
if(na.omit)
x <- x[!is.na(x)] # 忽略缺失值
c <- length(x)
m <- mean(x)
std <- sd(x)
skew <- sum((x-m)^3/std^3)/c
return(c(counts=c,mean=m,std=std,skew=skew))
}
sapply(mt,mystats)
# by(): 允许使用多返回值函数
by(mtcars[c("mpg","hp","wt","am")],mtcars$am,mystats)
# by(): 允许使用多返回值函数
dstats <- function(x){sapply(x,mystats)}
by(mtcars[c("mpg","hp","wt","am")],mtcars$am,dstats)
# 生成一维频数表：table()
library(vcd)
mytable <- with(Arthritis,table(Improved))
mytable
prob.table(mytable) # 转化为比例值
prop.table(mytable) # 转化为比例值
prop.table(mytable)
prop.table(mytable,1)
prop.table(mytable,2)
mytable <- xtabs(~Treatment+Improved,data=Arthritis)
prop.table(mytable)
prop.table(mytable,1)
margin.table(mytable,1) # 行和
margin.table(mytable,2) # 列和
addmargins(mytable) # 添加行和与列和到表
mytable
addmargins(prop.table(mytable))
addmargins(prop.table(mytable,1),2)
addmargins(prop.table(mytable,2),1)
# 创建二维列联表：CrossTable()
library(gmodels)
# 创建二维列联表：CrossTable()
install.packages(gmodels)
# 创建二维列联表：CrossTable()
install.packages(gmodels)
# 创建二维列联表：CrossTable()
install.packages("gmodels")
CrossTable(Arthritis$Treatment,Arthritis$Improved)
library(gmodels)
CrossTable(Arthritis$Treatment,Arthritis$Improved)
# 多维列联表
mytable <- xtabs(~Treatment+Sex+Improved,data=Arthritis)
mytable
margin.table(mytable,1)
margin.table(mytable,2)
margin.table(mytable,3)
margin.table(mytable,c(1,3))
prop.table(mytable,c(1,2))
margin.table(mytable,c(1,3))
margin.table(mytable,c(1,2))
margin.table(mytable,1) # 行和
prop.table(mytable,1) # 行比例
mytable <- xtabs(~Treatment+Improved,data=Arthritis)
margin.table(mytable,1) # 行和
prop.table(mytable,1) # 行比例
# 多维列联表
mytable <- xtabs(~Treatment+Sex+Improved,data=Arthritis)
margin.table(mytable,1)
margin.table(mytable,2)
margin.table(mytable,3)
margin.table(mytable,c(1,3))
margin.table(mytable,c(1,2))
prop.table(mytable,c(1,2))
ftable(prop.table(mytable,c(1,2)))
ftable(addmargins(prop.table(mytable,c(1,2)),3))
addmargins(prop.table(mytable,c(1,2)),3)
# 常见相关系数及计算：
# Pearson相关系数
cor(states)
states <- state.x77[,1:6]
# 协方差
cov(states)
# Spearman相关系数
cor(states,method="spearman")
# Spearman相关系数
cor(states,method="spearman")
# 常见相关系数及计算：
# Pearson相关系数
cor(states)
# Kendall相关系数
cor(states,method="kendall")
cor(states[,c(1,2,3,6)],states[,c(4,5)]) # 非方形相关矩阵
# 偏相关系数
# 偏相关是指在控制一个或多个定量变量(要排除影响的定量变量)时，另外两个定量变量之间的相互关系
pcor(c("Population","Murder","Income","IIIiteracy","HS Grad"),cov(states))
# 偏相关系数
# 偏相关是指在控制一个或多个定量变量(要排除影响的定量变量)时，另外两个定量变量之间的相互关系
install.packages("ggm")
library(ggm)
pcor(c("Population","Murder","Income","IIIiteracy","HS Grad"),cov(states))
pcor(c(1,5,2,3,6),cov(states))
# 相关性的显著性检验
# 常用原假设：变量之间不相关(相关系数为0)
# 检验：cor.test(x,y,alter=,method=) alter->two.side\less\greater method->pearson\spearman\kendall
cor.test(states[,3],states[,5])
# cot.test每次只能检验一种相关关系，故
install.packages("psych")
libirary("psych")
corr.test(states,use="complete")
libirary("psych")
libirary(psych)
corr.test(states,use="complete")
library(psych)
corr.test(states,use="complete")
corr.test(states,use="complete",short=FALSE)
options(short=FALSE)
corr.test(states,use="complete")
# aov(formula,data=df)
library(multcomp)
attach(cholesterol)
cholesterol
fit <- aov(response ~ trt)
summary(fit)
dim(cholesterol)
plotmeans(response ~ trt,xlab="Treatment",ylab="Response",main="不同疗法胆固醇降低的均值\n(含95%的置信区间)")
library(gplots)
plotmeans(response ~ trt,xlab="Treatment",ylab="Response",main="不同疗法胆固醇降低的均值\n(含95%的置信区间)")
# F检验表明物种药物疗法效果不同，但是并没有指出哪种疗法与其它疗法不同，故采用多重比较
# TukeyHSD()：提供了对各组均值差异的成对检验
TukeyHSD(fit)
plot(TukeyHSD(fit))
par(ylas=2)
par(las=2)
plot(TukeyHSD(fit))
par(mar=c(5,5,5,5))
plot(TukeyHSD(fit))
par(mar=c(10,5,5,5))
plot(TukeyHSD(fit))
par(mar=c(5,10,5,5))
plot(TukeyHSD(fit))
par(mar=c(5,10,5,10))
plot(TukeyHSD(fit))
# 双因素方差分析
attach(ToothGrowth)
table(supp,dose) # 喂食方法 抗坏血酸含量
# interaction.plot()：可用于展示双因素方差分析的交互效应
interaction.plot(dose,supp,len,type="b",col=c("red","blue"),pch=c(16,18))
# or
plotmeans(len ~ interaction(supp,dose),connect = list(c(1,3,5),c(2,4,6)),col=c("red","blue"))
# or
plotmeans(len ~ interaction(supp,dose,sep=" "),connect = list(c(1,3,5),c(2,4,6)),col=c("red","blue"))
# or
plotmeans(len ~ interaction(supp,dose,sep=" "),connect = list(c(1,2,3),c(4,5,6)),col=c("red","blue"))
# or
plotmeans(len ~ interaction(supp,dose,sep=" "),connect = list(c(1,3,5),c(2,4,6)),col=c("red","blue"))
# or
install.packages("HH")
library(HH)
interaction2wt(len ~ supp*dose) # 能够展示任意复杂度设计的主效应和交互效应
dim(Arthritis)
### 独立性检验
# 卡方独立性检验
# 原假设：假设两属性之间相互独立
mytable <- xtabs(~Treatment+Improved,data=Arthritis)
chisq.test(mytale)
### 独立性检验
# 卡方独立性检验
# 原假设：假设两属性之间相互独立
mytable <- xtabs(~Treatment+Improved,data=Arthritis)
chisq.test(mytale)
chisq.test(mytable)
mytable <- xtabs(~Improved+Sex,data=Arthritis)
chisq.test(mytable)
### 独立性检验
# 卡方独立性检验
# 原假设：假设两属性之间相互独立
mytable <- xtabs(~Sex+Improved,data=Arthritis)
chisq.test(mytable) # 警告原因：不满足卡方检验的假设之一
mytable <- xtabs(~Treatment+Improved,data=Arthritis)
chisq.test(mytable)
# Fisher精确检验
fisher.test(mytable)
# CMH(Cochran-Mantel-Haenszel)检验
# 原假设：两个名义变量在第三个变量的每一层中都是条件独立的
mytable <- xtabs(~Treatment+Improved+Sex,data=Arthritis)
mytable
mantelhaen.test(mytable)
### 组间差异的非参数检验
# 两组的比较
# 若两组数据独立，可以使用Wilcoxon秩和检验来评估观测是否是从相同的概率分布中抽得的
# wilcox.test(y~x,data):x为二分变量，y为数值变量 or wilcox.test(x,y):x、y为各组数据的结果变量
library(MASS)
wilcon.test(Prob~So,data=UScrime)
wilcox.test(Prob~So,data=UScrime)
# 多于两组的比较
# 各组独立：kruskal.test(y~A,data)
# 各组不独立：friedman.test(y~A|B,data)
states <- data.frame(state.region,state.x77)
assocstats(mytable)
UScrime
# 读取数据集
flights <- fread("D:/Course/数据科学导论与R语言/R语言/flights14.csv")
### 基础
library(data.table)
# 读取数据集
flights <- fread("D:/Course/数据科学导论与R语言/R语言/flights14.csv")
ans <- flights[,.N,by=origin] #
ans
flights
### 主键
# 设置主键
setkey(flights,origin)
flights
# 设置主键(多列)
# setkey(flights,origin,dest) or
setkeyv(flights,c("oringin","dest"))
# 设置主键(多列)
# setkey(flights,origin,dest) or
setkeyv(flights,c("origin","dest"))
# 主键、j、by
flights[.("LGA","TPA"),max(arr_delay)]
flights["JFK",max(dep_delay),keyby=month]
### 参数mult和nomatch
# mult
flights[.("JFK","MIA"),mult="first"]
sample(letters, 10, TRUE)
# 使用参数on和索引快速subset
flights["JFK",on="origin"] # .("JFK")
sample(1e5L, 1e7L, TRUE)
sample(letters,10,TRUE)
runif(100L)
dt = data.table(x = sample(1e5L, 1e7L, TRUE), y = runif(100L))
dim(dt)
dt
dt[100]
dt[200]
dt=data.table(1:10,1)
df
dt
# 创建数据集
set.seed(1L)
df = data.table(x=samle(1e5L,1e20L,TRUE),y=runif(100L))
print(object.size(dt),units="Mb")
# 创建数据集
set.seed(1L)
df = data.table(x=samle(1e5L,1e20,TRUE),y=runif(100L))
df = data.table(x=sample(1e5L,1e20,TRUE),y=runif(100L))
df = data.table(x=sample(1e5L,1e12,TRUE),y=runif(100L))
df = data.table(x=sample(1e5L,3e8,TRUE),y=runif(100L))
kill
df
print(object.size(dt),units="Mb")
dt = data.table(x=sample(1e5L,3e8,TRUE),y=runif(100L))
print(object.size(dt),units="Mb")
rm(dt)
# 创建数据集
set.seed(1L)
dt = data.table(x=sample(1e5L,3e8L,TRUE),y=runif(100L))
dt = data.table(x=sample(1e5L,1e9L,TRUE),y=runif(100L))
print(object.size(dt),units="Mb")
### Intro
# 背景
# 影子拷贝(指针，不是真被复制)与深度拷贝(真的被复制)
df = data.frame(ID = c("b","b","b","a","a","c"), A = 1:6, B = 7:12, C=13:18)
df$C <- 18:13
df
df$C[df$ID=="b"] <- 15:13
df
df_copy_1 = df$C <- 18:13
df_copy_2 = df$C[df$ID=="b"] <- 15:13
df_copy_1 = 1
df
df_copy_2
# 更新列
flights[,sort(unique(hour))] # 获取hour列所有可能值并排序
flights[hour==24L,hour:=0L][] # 24点均替换为0点，其中"[]"用来查看运行结果
# 添加列
flights[,c("speed"):=list(distance/(air_time/60))] # 添加speed列
flight[,`:=`(total_delay=arr_delay+dep_delay)] # 添加total_delay列
flights[,`:=`(total_delay=arr_delay+dep_delay)] # 添加total_delay列
flights
# 删除列
flights[,c("total_delay"):=NULL] # 删除一列时，可去掉c("")
fligths[,`:=`(speed=NULL)]
flights[,`:=`(speed=NULL)]
flights
# ":="与分组
flights[, max_speed := max(speed), by=.(origin, dest)]
flights[,c("speed","total_delay"):=list(distance/(air_time/60),arr_delay+dep_delay)]
# ":="与分组
flights[, max_speed := max(speed), by=.(origin, dest)]
flights
# ":="与分组
x=flights[, max_speed := max(speed), by=.(origin, dest)]
x
x
x
# ":="与分组
flights[, .N, by=.(origin, dest)]
# ":="与复数列
flights[,c("max_dep_delay","max_arr_delay"):=lapply(.SD,max),by=month,.SDcols=c("dep_delay","arr_delay")]
flights
# .SD：包含通过by分组后的每一组
dt = data.table(ID=c("b","b","b","a","a","c"), A=1:6, B=7:12, C=13:18)
dt[,lapply(.SD, mean),by=ID] # lapply()返回列表
# ":="与复数列
flights[,lapply(.SD,max),by=month,.SDcols=c("dep_delay","arr_delay")]
flights["month"]
flights[,c("month","max_dep_delay","max_arr_delay")]
# ":="与复数列
flights[,c("max_dep_delay","max_arr_delay"):=lapply(.SD,max),by=month,.SDcols=c("dep_delay","arr_delay")]
flights[,c("month","max_dep_delay","max_arr_delay")]
foo <- function(dt){
dt[,speed:=distance/(air_time/60)]
dt[,.(max_speed=max(speed),by=month)]
}
ans = foo(flights)
ans
foo <- function(dt){
dt[,speed:=distance/(air_time/60)]
dt
dt[,.(max_speed=max(speed),by=month)]
dt
}
ans = foo(flights)
ans
flights[, c("speed", "total_delay", "max_speed", "max_dep_delay", "max_arr_delay"):=NULL]
flights
# ":="的副作用
foo <- function(dt){
dt[,speed:=distance/(air_time/60)]
dt
dt[,.(max_speed=max(speed),by=month)]
dt
}
ans = foo(flights)
ans
flights[, c("speed", "total_delay", "max_speed", "max_dep_delay", "max_arr_delay"):=NULL] # 恢复原数据
foo <- function(dt){
dt[,speed:=distance/(air_time/60)]
dt[,.(max_speed=max(speed),by=month)]
}
ans = foo(flights)
ans
flights
flights[, c("speed", "total_delay", "max_speed", "max_dep_delay", "max_arr_delay"):=NULL] # 恢复原数据
column(fights)
flights
foo <- function(dt){
dt[,speed:=distance/(air_time/60)]
dt[,.(max_speed=max(speed)),by=month]
}
ans = foo(flights)
ans
flights
flights[,.(max_speed=max(speed)),by=month]
# ":="与copy()
flights[,speed:=NULL]
foo <- function(dt){
dt <- copy(dt)
dt[,speed:=distance/(air_time/60)]
dt[,.(max_speed=max(speed)),by=month]
}
ans = foo(flights)
ans
flights
df
dt
row.names(dt)
# data.frame --> data.table：行名被重置，因为data.table从不使用行名
dt = data.table(df)
row.names(dt)
df
dt
row.names <- (df,c("11","12","13","14","15","16"))
###### 主键、基于二分法搜索的subset
library(data.table)
flights <- fread("D:/Course/数据科学导论与R语言/R语言/flights14.csv")
# 设置主键(单列)
setkey(flights,origin)
flights
# 使用主键
flights[.("JFK")]
# 使用主键
flights[.("JFK","LGA")]
# 使用主键
flights[.("LGA")]
flights[c("JFK","LGA")]
# 设置主键(多列)
# setkey(flights,origin,dest) or
setkeyv(flights,c("origin","dest"))
key(flights)
.(unique(origin),"MIA")
list(unique(origin),"MIA")
# 主键、j、by
flights[.("LGA","TPA"),.(arr_delay)]
flights[.("LGA","TPA"),max(arr_delay)]
# 主键、j、by
flights[.("LGA", "TPA"), "arr_delay", with=FALSE]
flights[.("LGA","TPA"),.(arr_delay)][order(- arr_delay)]
setkey(flights,hour)
key(flights)
flights(.(24),hour:=0L)
key(flights)
flights[.(24),hour:=0L]
key(flights)
flights["JFK",max(dep_delay),keyby=month]
setkey(flights,origin,dest)
flights["JFK",max(dep_delay),keyby=month]
flights["JFK",lapply(.SD,max),keyby=month,.SDcols="dep_delay"]
flights["JFK",max(dep_delay),keyby=month]
flights["JFK",.(max(dep_delay)),keyby=month]
flights["JFK",.(.N,max(dep_delay)),keyby=month]
flights
key(ans)
ans = flights["JFK",max(dep_delay),keyby=month]
key(ans)
### 参数mult和nomatch
# mult：all、first、last
flights[.("JFK","MIA"),mult="first"]
flights[.(c("LGA","JFK","EWR"),"XNA"),mult="last"]
# nomatch：指定在没有找到符合条件的数据的情况下，是返回NA还是跳过(不返回)
flights[.(c("LGA","JFK","EWR"),"XNA"),mult="last",nomatch=0L]
### 二分搜索 VS 向量扫描
# 创建样本数据
set.seed(2L)
N=2e7L
x=sample(letters,N,TRUE)
x
x=sample(letters,N,FALSE)
runif(N)
dt = data.table(x=sample(letters,N,TRUE),y=sample(1000L,N,TRUE),val=runif(N),key=c("x","y"))
print(object.size(dt),units="Mb")
# 使用向量扫描方法
system.time(ans1 <- DT[x == "g" & y == 877L])
# 使用向量扫描方法
system.time(ans1<-dt[x=="g" & y==877L])
dt = data.table(x=sample(letters,N,TRUE),y=sample(1000L,N,TRUE),val=runif(N),key=c("x","y"))
# 使用向量扫描方法
system.time(dt[x=="g" & y==877L])
# 使用主键：二分搜索
system.time(dt[x=="g" & y==877L])
# 使用向量扫描方法
system.time(dt[x=="g" & y==877L])
# 使用主键：二分搜索
system.time(dt[x=="g" & y==877L])
# 使用向量扫描方法
system.time(dt[x=="f" & y==877L])
# 使用主键：二分搜索
system.time(dt[x=="f" & y==877L])
###### 二次索引和自动索引
library(data.table)
flights <- fread("D:/Course/数据科学导论与R语言/R语言/flights14.csv")
###### 二次索引和自动索引
library(data.table)
flights <- fread("D:/Course/数据科学导论与R语言/R语言/flights14.csv")
# 设置二级索引
setindex(flight,origin) # setindexv()
###### 二次索引和自动索引
library(data.table)
flights <- fread("D:/Course/数据科学导论与R语言/R语言/flights14.csv")
# 设置二级索引
setindex(flights,origin) # setindexv()
flights
# 获取二级索引
indices(flights)
indices(flights)
setindex(flights,origin)
indices(flights)
setindex(flights,dest)
indices(flights)
## 使用参数on和索引快速subset
# 参数on：能自动创建并重用二级索引
flights["JFK",on="origin"] # .("JFK")\list("JFK")
flights[.("JFK","LAX"),on=c("origin","dest")] # 选取所有从"JFK"起飞到达"LAX"的所有航班
flights[.("LGA", "TPA"), .(arr_delay), on = c("origin", "dest")]
flights[.("LGA", "TPA"), .(arr_delay), on = c("origin", "dest")][order(-arr_delay)]
flights["JFK", max(dep_delay), keyby = month, on = "origin"]
# 参数mult
flights[c("BOS", "DAY"), on = "dest", mult = "first"]
flights[.(c("LGA", "JFK", "EWR"), "XNA"), on = c("origin", "dest"), mult = "last"]
indices(flights) # 返回data.table所有的二级索引
## 使用参数on和索引快速subset
# 参数on：能自动创建并重用二级索引
flights["JFK",on="origin"] # .("JFK")\list("JFK")
indices(flights) # 返回data.table所有的二级索引
# 删除二级索引
setindex(flights,NULL)
indices(flights) # 返回data.table所有的二级索引
# 创建数据集
set.seed(1L)
dt = data.table(x=sample(1e5L,1e7L,TRUE),y=runif(100L))
print(object.size(dt),units="Mb")
system.time(ans<-dt[x == 989L]) # 第一次运行，自动创建索引
system.time(dt[x == 989L]) # 第一次运行，自动创建索引
dt = data.table(x=sample(1e5L,1e7L,TRUE),y=runif(100L))
system.time(dt[x == 989L]) # 第一次运行，自动创建索引
system.time(dt[x == 989L])
# 可以通过设置全局参数关闭自动索引
options(datatable.auto.index = FALSE)
dt = data.table(x=sample(1e5L,1e7L,TRUE),y=runif(100L))
system.time(dt[x == 989L])
system.time(dt[x == 989L])
