c<-c(TRUE,FALSE,TRUE,FALSE,FALSE)
### 基本的数据结构
# 1.向量：
# 向量是用于存储数值型、字符型或逻辑型数据的一维数组
# 执行组合功能的函数c()可以用来创建向量
a<-c(1,2,5,3,6,-3)
b<-c("one","two","three")
c<-c(TRUE,FALSE,TRUE,FALSE,FALSE)
m = (1:20, nrow=5, ncol=4, byrow=TRUE)
# 4.Data Frame
# 数据框不同的列可以包含不同模式的数据，是R中最常处理的数据结构
# data.frame()用于创建数据框
patientID <- c(1, 2, 3, 4)
age <- c(25, 34, 28, 52)
diabetes <- c("Type1", "Type2", "Type1", "Type1")
status <- c("Poor", "Improved", "Excellent", "Poor")
patientdata <- data.frame(patientID, age, diabetes, status)
patientdata[1:2] # 1、2列
patientdata[c("patientID","status")]
patientdata[2,] # 第二行
patientdata$age # age列
# 处理数据对象的常用函数
obj=c(1,2,3)
length(obj)
dim(obj)
dim(patientdata)
class(obj)
mode(obj)
names(obj)
names(patientdata)
fix(obj) # 直接编辑对象
obj
# 包是R函数、数据、预编译代码以一种定义完善的格式组成的集合
# library()函数可以显示库中有哪些包
library()
# 包的安装
install.packages() # 显示CRAN镜像站点列表，选择站点之后选择包下载并安装
# 包的安装
# install.packages()显示CRAN镜像站点列表，选择站点之后选择包下载并安装
install.packages("gclus") # 有引号
source("DS.R")
getwd()
help(options)
selfsum(2,3)
selfsum<-function(x, y){
z<-x+y
return(z)
}
selfdate<-function(type="short"){
switch (type,
long = format(Sys.time(),"%A %B %d %Y"),
short = format(Sys.time(),"%m-%d-%y"),
cat(type,"Type error")
)
}
selfsum(2,3)
selfdate("long")
selfdate("short")
selfdate()
selfdate("mid")
library(reshape)
leadership <- rename(leadership, c(manager="manager_id",date="cllect_date"))
manager <- c(1, 2, 3, 4, 5)
date <- c("10/24/08", "10/28/08", "10/1/08", "10/12/08", "5/1/09")
country <- c("US", "US", "UK", "UK", "UK")
gender <- c("M", "F", "F", "M", "F")
age <- c(32, 45, 25, 39, 99)
q1 <- c(5, 3, 3, 3, 2)
q2 <- c(4, 5, 5, 3, 2)
q3 <- c(5, 2, 5, 4, 1)
q4 <- c(5, 5, 5, NA, 2)
q5 <- c(5, 5, 2, NA, 1)
leadership <- data.frame(manager, date, country, gender, age, q1, q2, q3, q4, q5, stringsAsFactors=FALSE)
# leadership$age_category[leadership$age>60] <- "Elder"
# leadership$age_category[leadership$age>=30&leadership$age<=60] <- "Mid"
# leadership$age_category[leadership$age<30] <- "Young"
# install.packages("reshape")
library(reshape)
leadership <- rename(leadership, c(manager="manager_id",date="cllect_date"))
leadership
names(leadership)
names(leadership)[6:10] <- c("a","b","c","d","e")
ledership
leadership
leadership <- rename(leadership, c(manager="manager_id",date="collect_date"))
leadership
library(reshape)
leadership <- rename(leadership, c(manager="manager_id",date="collect_date"))
leadership
library(reshape)
leadership <- rename(leadership, c(manager="manager_id",cllect_date="collect_date"))
leadership
### 日期值处理
# 日期至通常以字符串的形式输入到R中，然后转化为以数值形式存储的日期变量：as.Date(x,"format")
# %d 数字日期(01-31)
# %a 缩写星期名；%A 非缩写星期名
# %m 数字月份(01-12)
# %b 缩写月份；%B 非缩写月份
# %y 两位数年份；%Y 四位数年份
the_date = as.Date(c("2010-01-01")) # 默认输入格式 %Y-%m-%d
the_date
### 日期值处理
# 日期至通常以字符串的形式输入到R中，然后转化为以数值形式存储的日期变量：as.Date(x,"format")
# %d 数字日期(01-31)
# %a 缩写星期名；%A 非缩写星期名
# %m 数字月份(01-12)
# %b 缩写月份；%B 非缩写月份
# %y 两位数年份；%Y 四位数年份
the_date = as.Date(c("2010-1-1")) # 默认输入格式 %Y-%m-%d
the_date
### 日期值处理
# 日期至通常以字符串的形式输入到R中，然后转化为以数值形式存储的日期变量：as.Date(x,"format")
# %d 数字日期(01-31)
# %a 缩写星期名；%A 非缩写星期名
# %m 数字月份(01-12)
# %b 缩写月份；%B 非缩写月份
# %y 两位数年份；%Y 四位数年份
the_date = as.Date(c("2010-00-01")) # 默认输入格式 %Y-%m-%d
### 日期值处理
# 日期至通常以字符串的形式输入到R中，然后转化为以数值形式存储的日期变量：as.Date(x,"format")
# %d 数字日期(01-31)
# %a 缩写星期名；%A 非缩写星期名
# %m 数字月份(01-12)
# %b 缩写月份；%B 非缩写月份
# %y 两位数年份；%Y 四位数年份
the_date = as.Date(c("2010-01-01")) # 默认输入格式 %Y-%m-%d
the_date
leadership$collect_date <- as.Date(leadership$collect_date,"%m/%d/%y")
leadership
today = Sys.Date() # 返回当前日期
today
format(today, format="%Y %m %d %a") # 输出指定格式日期
format(today, format="%Y %m %d %A") # 输出指定格式日期
start = as.Date("1999-11-17")
now = Sys.Date()
days = now-start
days
days = difftime(now,start,unit="days")
days
### 数据排序
ord = leadership[order[leadership$age],]
ord
### 数据排序
ord = leadership[order(leadership$age),]
ord
# 2.
sub = leadership[!(names(leadership) %in% c("country","gender","age"))]
sub
# 2.
sub = leadership[,!(names(leadership) %in% c("country","gender","age"))]
sub
# 2.
sub_fea = names(leadership) %in% c("country","gender","age")
sub = leadership[!sub_fea]
sub
# 2.
sub_fea = names(leadership) %in% c("country","gender","age")
sub = leadership[,!sub_fea]
sub
1:100
# 3.
sub = leadership[c(TRUE,FALSE),]
sub
# 4.
leadership$e <- NULL
leadership
sub <- leadership[c(-9)]
sub
# 5.
sub = subset(leadership, age<30, select = c("a","b","c"))
sub
### 随机抽样
# sample()
sample(1:nrow(leadership),3,replace=TRUE)
### 随机抽样
# sample()
sample(1:nrow(leadership),3,replace=TRUE)
### 随机抽样
# sample()
leadership[sample(1:nrow(leadership),3,replace=FALSE),] # 无放回抽样
### 数据的整合和重构
# 1.转置
mtcars
### 数据的整合和重构
# 1.转置
cars = mtcars[1:5,1:4] # 内置数据集
t(cars)
# 2.分类汇总
options(digit=3) # 保留3位有效数字
aggre = aggregate(mtcars,by=list(cyl,gear),FUN=mean,na.rm=TRUE) # by变量必须在一个列表中，即使只有一个变量
# 2.分类汇总
options(digit=3) # 保留3位有效数字
attach(mtcars)
aggre = aggregate(mtcars,by=list(cyl,gear),FUN=mean,na.rm=TRUE) # by变量必须在一个列表中，即使只有一个变量
aggre
names(mtcars)
feeling <- c("sad","afraid","hi")
for (i in feeling){
print(
switch (i,
sad = "sad",
afraid = "afraid",
cat(i)
)
)
}
feeling <- c("sad","afraid","hi")
for (i in feeling){
print(
switch (i,
sad = "sad",
afraid = "afraid",
cat(i,"")
)
)
}
feeling <- c("sad","afraid","hi")
for (i in feeling){
print(
switch (i,
sad = "sad",
afraid = "afraid",
cat(i," can't be recognized!")
)
)
}
feeling <- c("sad","afraid","hi")
for (i in feeling){
print(
switch (i,
sad = "sad",
afraid = "afraid",
cat(i,"can't be recognized!")
)
)
}
